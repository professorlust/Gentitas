// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Entitas;
using System.Collections.Generic;

{{#each this}}
namespace {{@key}}.Indexes {
	{{#each contexts}}
	namespace {{toUpper name}} {
		{{#each indexes}}
        public interface I{{toUpper name}}Index {
            /// Value: {{valueComponentName}} {{#if flagComponentNames}}| Flags:{{/if}} {{#each flagComponentNames}}{{toUpper this}}{{/each}}
            {{toUpper ../name}}Entity FindSingle({{type}} value);
            /// Value: {{valueComponentName}} {{#if flagComponentNames}}| Flags:{{/if}} {{#each flagComponentNames}}{{toUpper this}}{{/each}}
            HashSet<{{toUpper ../name}}Entity> Find({{type}} value);
            int GetCount({{type}} value);
        }

        public class {{toUpper name}}Index : Entitas.Gentitas.Index<{{type}}, {{toUpper ../name}}Entity>, I{{toUpper name}}Index
        {
            IGroup<{{toUpper ../name}}Entity> groupToWatch;

            public {{toUpper name}}Index(StateContext context) : base()
            {
                groupToWatch = context.GetGroup(Matcher<{{toUpper ../name}}Entity>.AllOf({{toUpper ../name}}Matcher.{{toUpper valueComponentName}}{{#each flagComponentNames}}, {{toUpper ../../name}}Matcher.{{this}}{{/each}}));
                groupToWatch.OnEntityAdded += Added;
                groupToWatch.OnEntityUpdated += Updated;
                groupToWatch.OnEntityRemoved += Removed;
            }

            ~{{toUpper name}}Index () {
                groupToWatch.OnEntityAdded -= Added;
                groupToWatch.OnEntityUpdated -= Updated;
                groupToWatch.OnEntityRemoved -= Removed;
            }

            protected override bool Filter({{toUpper ../name}}Entity entity)
            {
                return entity.Has{{toUpper valueComponentName}}() {{#each flagComponentNames}}&& entity.Has{{this}}(){{/each}};
            }

            void Remove({{toUpper ../name}}Entity entity, {{type}} value) {
                if (lookup.ContainsKey(value))
                {
                    var list = lookup[value];
                    if (list.Contains(entity)) list.Remove(entity);
                }
            }

            void HandleEntity({{toUpper ../name}}Entity entity, {{type}} value)
            {
                if (entity.Has{{toUpper valueComponentName}}()) {
                    if (Filter(entity))
                    {
                        if (!lookup.ContainsKey(value)) lookup.Add(value, new HashSet<{{toUpper ../name}}Entity>());
                        var list = lookup[value];
                        if (!list.Contains(entity)) list.Add(entity);
                    }
                    else
                    {
                        Remove(entity, value);
                    }
                } else {
                    Remove(entity, value);
                }
            }

            void HandleEntity({{toUpper ../name}}Entity entity, {{type}} value, {{type}} previousValue)
            {
                if (value != previousValue)
                {
                    Remove(entity, previousValue);
                }
                
                HandleEntity(entity, value);
            }

            void Added(IGroup<{{toUpper ../name}}Entity> group, {{toUpper ../name}}Entity entity, int index, IComponent component)
            {
                HandleEntity(entity, ((Components.{{toUpper ../name}}.{{toUpper valueComponentName}})component).value);
            }

            void Updated(IGroup<{{toUpper ../name}}Entity> group, {{toUpper ../name}}Entity entity, int index, IComponent previousComponent, IComponent component)
            {
                HandleEntity(entity, ((Components.{{toUpper ../name}}.{{toUpper valueComponentName}})component).value, ((Components.{{toUpper ../name}}.{{toUpper valueComponentName}})previousComponent).value);
            }

            void Removed(IGroup<{{toUpper ../name}}Entity> group, {{toUpper ../name}}Entity entity, int index, IComponent component)
            {
                HandleEntity(entity, ((Components.{{toUpper ../name}}.{{toUpper valueComponentName}})component).value);
            }

            public {{toUpper ../name}}Entity FindSingle({{type}} value)
            {
                if (!lookup.ContainsKey(value)) return null;
                if (lookup[value].Count == 0) return null;
                if (lookup[value].Count > 1) {
                    UnityEngine.Debug.LogError("{{realNamespace}}.{{toUpper name}}Index has more than 1 entity with value " + value);
                    return null;
                }
                foreach (var item in  lookup[value])
                {
                    return item;
                }
                return null;
            }

            public HashSet<{{toUpper ../name}}Entity> Find({{type}} value)
            {
                if (!lookup.ContainsKey(value)) return new HashSet<{{toUpper ../name}}Entity>();
                return lookup[value];
            }

            public int GetCount({{type}} value)
            {
                if (!lookup.ContainsKey(value)) return 0;
                return lookup[value].Count;
            }
        }
		{{/each}}
	}
	{{/each}}
}
{{/each}}
