// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Entitas;
using System.Collections.Generic;

{{#each this}}
namespace {{@key}} {
	{{#each contexts}}
	public partial class {{toUpper @key}}Context {
		//
		// Single Groups
		//

		{{#each singleGroups}}
		// {{toUpper @key}} Group
		public IGroup<{{toUpper @../key}}Entity> {{toLower @key}}Group {
			get { return GetGroup(Matcher<{{toUpper @../key}}Entity>{{#if matcher.all.length}}
							.AllOf({{#each matcher.all}}{{toUpper @../../key}}Matcher.{{toUpper this}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}{{#if matcher.any.length}}
							.AnyOf({{#each matcher.any}}{{toUpper @../../key}}Matcher.{{toUpper this}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}{{#if matcher.none.length}}
							.NoneOf({{#each matcher.none}}{{toUpper @../../key}}Matcher.{{toUpper this}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}); } }

		public {{toUpper @../key}}Entity {{toLower @key}}Entity {
			get { 
				if ({{toLower @key}}Group.count > 1) {
					return null;
				}
				if ({{toLower @key}}Group.count == 0) {
					return null;
				}
				return {{toLower @key}}Group.GetSingleEntity(); } }

		{{#if matcher.all}}
		{{#ifCond matcher.all.length '==' 1}}
		{{#unless matcher.none}}
		{{#unless matcher.any}}
		{{#if type}}
		public {{type}} {{toLower @key}} { 
			get {
				if ({{toLower @key}}Entity == null) throw new System.Exception("{{toUpper @../key}}Context has 0 or more than 1 entity with component '{{toUpper @key}}'. You can check safely with 'Has{{toUpper @key}}()'");
				return {{toLower @key}}Entity.{{toLower @key}};
			}	
			set { 
				if ({{toLower @key}}Group.count > 1) throw new System.Exception("{{toUpper @../key}}Context has more than 1 entity with component '{{toUpper @key}}'. You can check safely with 'Has{{toUpper @key}}()'");
				else if ({{toLower @key}}Group.count == 0) this.CreateEntity().{{toLower @key}} = value;
				else {{toLower @key}}Entity.{{toLower @key}} = value;
			}
		}
		{{else}}
		public bool {{toLower @key}} { 
			get { return {{toLower @key}}Group.count == 1; }	
			set { 
				if ({{toLower @key}}Group.count > 1) throw new System.Exception("{{toUpper @../key}}Context has more than 1 entity with component '{{toUpper @key}}'. You can check safely with 'Has{{toUpper @key}}()'");
				else if ({{toLower @key}}Group.count == 0) {
					if (value) this.CreateEntity().{{toLower @key}} = value;
				}
				else {
					if (value) { {{toLower @key}}Entity.{{toLower @key}} = true; }
					else { {{toLower @key}}Entity.Destroy(); }
				}
			}
		}
		{{/if}}
		{{/unless}}
		{{/unless}}
		{{/ifCond}}
		{{/if}}
		public bool Has{{toUpper @key}}() {	return {{toLower @key}}Group.count == 1;	}

		{{/each}}

		//
		// Groups
		//

		{{#each multiGroups}}
		// {{toUpper @key}} Group
		public IGroup<{{toUpper @../key}}Entity> {{toLower @key}}Group {
			get { return GetGroup(Matcher<{{toUpper @../key}}Entity>{{#if matcher.all.length}}
							.AllOf({{#each matcher.all}}{{toUpper @../../key}}Matcher.{{toUpper this}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}{{#if matcher.any.length}}
							.AnyOf({{#each matcher.any}}{{toUpper @../../key}}Matcher.{{toUpper this}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}{{#if matcher.none.length}}
							.NoneOf({{#each matcher.none}}{{toUpper @../../key}}Matcher.{{toUpper this}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}); } }

		public {{toUpper @../key}}Entity[] {{toLower @key}}Entities { 
			get { return {{toLower @key}}Group.GetEntities(); } }
		
		{{/each}}
	}

	{{/each}}

}
{{/each}}
