// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Entitas;
using UnityEngine;
using System.Collections.Generic;

{{#each modules}}
namespace {{@key}}.Contracts {
{{#each reactiveContracts}}
    {{#if namespaceValue}}namespace {{namespaceValue}} { {{/if}}
        namespace Base {
            public abstract class {{nameUpperValue}}: ReactiveSystem<{{contextValue.moduleNameValue}}.{{contextValue.nameUpperValue}}Entity> {
                protected {{contextValue.moduleNameValue}}.{{contextValue.nameUpperValue}}Context context;
                {{#if isSpyValue}}
                {{contextValue.moduleNameValue}}.Contexts spyContexts { get { return {{contextValue.moduleNameValue}}.Contexts.sharedInstance; } }
                {{/if}}
                Contexts contexts;

                {{#each ../contexts}}
                protected {{classNameValue}} {{nameValue}};
                {{/each}}

                public {{nameUpperValue}} (Contexts contexts) : base({{#if isSpyValue}}{{contextValue.moduleNameValue}}.Contexts.sharedInstance{{else}}contexts{{/if}}.{{contextValue.nameValue}}) {
                    this.context = {{#if isSpyValue}}spyContexts{{else}}contexts{{/if}}.{{contextValue.nameValue}};
                    this.contexts = contexts;

                    {{#each ../contexts}}
                    {{nameValue}} = contexts.{{nameValue}};
                    {{/each}}
                }

                protected sealed override ICollector<{{contextValue.moduleNameValue}}.{{contextValue.nameUpperValue}}Entity> GetTrigger (IContext<{{contextValue.moduleNameValue}}.{{contextValue.nameUpperValue}}Entity> context) {
                    return new Collector<{{contextValue.moduleNameValue}}.{{contextValue.nameUpperValue}}Entity>(
                        new IGroup<{{contextValue.moduleNameValue}}.{{contextValue.nameUpperValue}}Entity>[] { 
                            {{#each triggersValue}}
                            context.GetGroup(Matcher<{{../contextValue.moduleNameValue}}.{{../contextValue.nameUpperValue}}Entity>{{#if match.allOf.length}}
                                .AllOf({{#each match.allOf}}{{moduleNameValue}}.{{../../contextValue.nameUpperValue}}Matcher.{{nameUpperValue}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}{{#if match.anyOf.length}}
                                .AnyOf({{#each match.anyOf}}{{moduleNameValue}}.{{../../contextValue.nameUpperValue}}Matcher.{{nameUpperValue}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}{{#if match.noneOf.length}}
                                .NoneOf({{#each match.noneOf}}{{moduleNameValue}}.{{../../contextValue.nameUpperValue}}Matcher.{{nameUpperValue}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}){{#unless @last}},{{/unless}}
                            {{/each}}
                        },
                        new GroupEvent[] { 
                            {{#each triggersValue}}
                            GroupEvent.{{eventType}}{{#unless @last}}, {{/unless}}
                            {{/each}} 
                        }  
                    );
                }

                protected override bool Filter ({{contextValue.moduleNameValue}}.{{contextValue.nameUpperValue}}Entity entity) {
                    return true;
                }

                protected sealed override void Execute (List<{{contextValue.moduleNameValue}}.{{contextValue.nameUpperValue}}Entity> entities) { Act(entities); }

                protected virtual void Act (List<{{contextValue.moduleNameValue}}.{{contextValue.nameUpperValue}}Entity> entities) {
                    Debug.Log("Not implemented contract: {{moduleNameValue}}.{{nameUpperValue}}");
                }
            }
        }

        public partial class {{nameUpperValue}}: Base.{{nameUpperValue}} {
            public {{nameUpperValue}} (Contexts contexts) : base(contexts) { }
        }
    {{#if namespaceValue}} } {{/if}}

{{/each}}

}

{{/each}}
