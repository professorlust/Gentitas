// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Entitas;
using System.Collections.Generic;

{{#each modules}}
namespace {{@key}} {
	{{#each contexts}}
	public partial class {{nameUpperValue}}Context {
	{{#each ../groups}}
		{{#ifCond contextValue.nameValue '===' ../nameValue}}
		// {{nameUpperValue}}
		{{#if singleValue}}
		IGroup<{{contextValue.nameUpperValue}}Entity> {{nameValue}}Group {
			get { return GetGroup(Matcher<{{contextValue.nameUpperValue}}Entity>{{#if matchValue.allOf.length}}
							.AllOf({{#each matchValue.allOf}}{{../contextValue.nameUpperValue}}Matcher.{{nameUpperValue}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}{{#if matchValue.anyOf.length}}
							.AnyOf({{#each matchValue.anyOf}}{{../contextValue.nameUpperValue}}Matcher.{{nameUpperValue}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}{{#if matchValue.noneOf.length}}
							.NoneOf({{#each matchValue.noneOf}}{{../contextValue.nameUpperValue}}Matcher.{{nameUpperValue}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}); } }

		public {{contextValue.nameUpperValue}}Entity {{nameValue}}Entity {
			get { return {{nameValue}}Group.GetSingleEntity(); } }

		public bool has{{toUpper nameValue}}Entity {
			get { return {{nameValue}}Group.count == 1; } 
			set {
				if (value != has{{toUpper nameValue}}Entity) {
					if (value) {
						CreateEntity().has{{nameUpperValue}} = value;
					} else {
						{{nameValue}}Entity.Destroy();
					}
				}
			}
		}

		{{else}}
		IGroup<{{contextValue.nameUpperValue}}Entity> {{nameValue}}Group {
			get { return GetGroup(Matcher<{{contextValue.nameUpperValue}}Entity>{{#if matchValue.allOf.length}}
							.AllOf({{#each matchValue.allOf}}{{../contextValue.nameUpperValue}}Matcher.{{nameUpperValue}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}{{#if matchValue.anyOf.length}}
							.AnyOf({{#each matchValue.anyOf}}{{../contextValue.nameUpperValue}}Matcher.{{nameUpperValue}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}{{#if matchValue.noneOf.length}}
							.NoneOf({{#each matchValue.noneOf}}{{../contextValue.nameUpperValue}}Matcher.{{nameUpperValue}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}); } }

		public {{contextValue.nameUpperValue}}Entity[] {{nameValue}}Entities { 
			get { return {{nameValue}}Group.GetEntities(); } }

		{{/if}}
		{{/ifCond}}
	{{/each}}
	}

	{{/each}}

}

{{/each}}
