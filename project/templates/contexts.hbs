// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Entitas;
using System.Collections.Generic;

public partial class Contexts : IContexts {
    public static Contexts sharedInstance {
        get {
            if(_sharedInstance == null) {
                _sharedInstance = new Contexts();
            }

            return _sharedInstance;
        }
        set { _sharedInstance = value; }
    }

    static Contexts _sharedInstance;

    public static void CreateContextObserver(IContext context) {
#if(!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)
        if(UnityEngine.Application.isPlaying) {
            var observer = new Entitas.Unity.VisualDebugging.ContextObserver(context);
            UnityEngine.Object.DontDestroyOnLoad(observer.gameObject);
        }
#endif
    }

    {{#each contexts}}
    public {{nameUpper}}Context {{name}} { get; set; }
    {{/each}}

    public IContext[] allContexts { get { return new IContext [] { {{#each contexts}}{{name}}{{#unless @last}}, {{/unless}}{{/each}} }; } }

    public void SetAllContexts() {
        {{#each contexts}}
        {{name}} = new {{nameUpper}}Context();
        {{/each}}

        {{#each contexts}}
        CreateContextObserver({{name}});
        {{/each}}
    }
}

{{#each contexts}}
public sealed partial class {{nameUpper}}Entity : Entity {
}

public sealed partial class {{nameUpper}}Context : Context<{{nameUpper}}Entity> {

    public {{nameUpper}}Context()
        : base(
            {{nameUpper}}ComponentsLookup.TotalComponents,
            0,
            new ContextInfo(
                "{{nameUpper}}",
                {{nameUpper}}ComponentsLookup.componentNames,
                {{nameUpper}}ComponentsLookup.componentTypes
            )
        ) {
    }
}

public static class {{nameUpper}}ComponentsLookup {
    {{#each components}}
    public const int {{nameUpper}} = {{@index}};
    {{/each}}

    public const int TotalComponents = {{components.length}};

    public static readonly string[] componentNames = {
        {{#each components}}
        "{{nameUpper}}"{{#unless @last}},{{/unless}}
        {{/each}}
    };

    public static readonly System.Type[] componentTypes = {
        {{#each components}}
        typeof({{className}}){{#unless @last}},{{/unless}}
        {{/each}}
    };
}
{{/each}}