// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Entitas;
using System.Collections.Generic;

{{#each modules}}
namespace {{@key}} {
    public partial class Contexts : IContexts {
        public static Contexts sharedInstance {
            get {
                if(_sharedInstance == null) {
                    _sharedInstance = new Contexts();
                }

                return _sharedInstance;
            }
            set { _sharedInstance = value; }
        }

        static Contexts _sharedInstance;

        public static void CreateContextObserver(IContext context) {
    #if(!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)
            if(UnityEngine.Application.isPlaying) {
                var observer = new Entitas.VisualDebugging.Unity.ContextObserver(context);
                UnityEngine.Object.DontDestroyOnLoad(observer.gameObject);
            }
    #endif
        }

        // Contexts
        {{#each contexts}}
        public {{nameUpperValue}}Context {{nameValue}} { get; set; }
        {{/each}}

        // IndiciesValue
        {{#each contexts}}
        {{#each indiciesValue}}
        public const string {{contextValue.nameUpperValue}}{{nameUpperValue}} = "{{contextValue.nameUpperValue}}{{nameUpperValue}}";
        {{/each}}
        {{/each}}

        public IContext[] allContexts { get { return new IContext [] { {{#each contexts}}{{nameValue}}{{#unless @last}}, {{/unless}}{{/each}} }; } }

        public Contexts() {
            {{#each contexts}}
            {{nameValue}} = new {{nameUpperValue}}Context();
            {{/each}}

            {{#each contexts}}
            CreateContextObserver({{nameValue}});
            {{/each}}

            InitializeEntityIndices();
        }

        public void InitializeEntityIndices() {
            {{#each contexts}}
            {{#each indiciesValue}}
            {{../nameValue}}.AddEntityIndex(new Entitas.EntityIndex<{{../nameUpperValue}}Entity, {{fieldValue}}>(
                "{{contextValue.nameUpperValue}}{{nameUpperValue}}",
                {{../nameValue}}.GetGroup({{../nameUpperValue}}Matcher.{{nameUpperValue}}),
                (e, c) => ((Components.{{../nameUpperValue}}.{{classNameValue}})c).value));
            {{/each}}
            {{/each}}
        }

        public void Reset() {
            var contexts = allContexts;
            for (int i = 0; i < contexts.Length; i++) {
                contexts[i].Reset();
            }
        }
    }

    {{#each contexts}}
    public sealed partial class {{nameUpperValue}}Entity : Entity {
        public {{nameUpperValue}}Entity AddComponentByName(string name) {
            var componentIndex = {{nameUpperValue}}ComponentsLookup.GetComponentIndex(name);
            if (componentIndex == -1) throw new System.Exception("There is no component named " + name);
            return this.AddComponentByIndex(componentIndex);
        }

        public {{nameUpperValue}}Entity AddComponentByIndex(int index) {
            this.AddComponent(index, this.CreateComponent(index, {{nameUpperValue}}ComponentsLookup.componentTypes[index]));
            return this;
        }
    }

    public partial class {{nameUpperValue}}Context : Context<{{nameUpperValue}}Entity> {
        public {{nameUpperValue}}Context()
            : base(
                {{nameUpperValue}}ComponentsLookup.TotalComponents,
                0,
                new ContextInfo(
                    "{{moduleNameValue}}{{nameUpperValue}}",
                    {{nameUpperValue}}ComponentsLookup.componentNames,
                    {{nameUpperValue}}ComponentsLookup.componentTypes
                ),
                (entity) =>

    #if (ENTITAS_FAST_AND_UNSAFE)
                    new Entitas.UnsafeAERC()
    #else
                    new Entitas.SafeAERC(entity)
    #endif

            ) {
        }

        {{#each indiciesValue}}
        {{#if indexUniqueValue}}
        public bool HasEntityWith{{nameUpperValue}}({{fieldValue}} value) {
            var collection = ((Entitas.EntityIndex<{{../nameUpperValue}}Entity, {{fieldValue}}>)GetEntityIndex(Contexts.{{contextValue.nameUpperValue}}{{nameUpperValue}})).GetEntities(value);
            return collection.Count == 1;
        }

        public {{../nameUpperValue}}Entity GetEntityWith{{nameUpperValue}}({{fieldValue}} value) {
            var collection = ((Entitas.EntityIndex<{{../nameUpperValue}}Entity, {{fieldValue}}>)GetEntityIndex(Contexts.{{contextValue.nameUpperValue}}{{nameUpperValue}})).GetEntities(value);
            if (collection.Count == 0) return null;
            if (collection.Count == 1) return collection.SingleEntity();
            throw new System.Exception("{{../nameUpperValue}}Context does not have Entity with {{nameUpperValue}} = " + value + ". Try checking with HasEntityWith{{nameUpperValue}}({{fieldValue}} value) before calling Get method.");
        }
        {{else}}
        public System.Collections.Generic.HashSet<{{../nameUpperValue}}Entity> GetEntitiesWith{{nameUpperValue}}({{fieldValue}} value) {
            return ((Entitas.EntityIndex<{{../nameUpperValue}}Entity, {{fieldValue}}>)GetEntityIndex(Contexts.{{contextValue.nameUpperValue}}{{nameUpperValue}})).GetEntities(value);
        }
        {{/if}}

        {{/each}}
    }

    public static class {{nameUpperValue}}ComponentsLookup {
        {{#each compsValue}}
        public const int {{nameUpperValue}} = {{@index}};
        {{/each}}

        public const int TotalComponents = {{compsValue.length}};

        public static readonly Dictionary<string, int> componentsDict = new Dictionary<string, int> () {
            {{#each compsValue}}
            {"{{nameUpperValue}}", {{@index}} }{{#unless @last}},{{/unless}}
            {{/each}}
        };

        public static readonly string[] componentNames = {
            {{#each compsValue}}
            "{{nameUpperValue}}"{{#unless @last}},{{/unless}}
            {{/each}}
        };

        public static readonly System.Type[] componentTypes = {
            {{#each compsValue}}
            typeof({{#if isUniversalValue}}{{moduleNameRefValue}}.Components.{{classNameValue}}{{else}}Components.{{../nameUpperValue}}.{{classNameValue}}{{/if}}){{#unless @last}},{{/unless}}
            {{/each}}
        };

        public static int GetComponentIndex(string name) {
            int resultIndex = -1;
            if (componentsDict.TryGetValue(name, out resultIndex)) {
                return resultIndex;
            }

            return -1;
        }

        public static int GetComponentIndex(System.Type t) {
            for (var i = 0; i < componentTypes.Length; i++) {
                if (componentTypes[i] == t) return i;
            }

            return -1;
        }
    }
    {{/each}}
}
{{/each}}