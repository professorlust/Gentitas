// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Entitas;
using System.Collections.Generic;

{{#each modules}}
//
// {{@key}}
//

// Fake Entities
{{#each fakeContexts}}
namespace {{moduleNameValue}} {
    public interface {{entityInterfaceValue}} : global::Entitas.IEntity {
        {{#each compsValue}}

        // {{classNameValue}}
        {{#if fieldValue}}
        {{fieldValue}} {{nameValue}} { get; set; }
        bool has{{nameUpperValue}} { get; set; } 
        void Ping{{nameUpperValue}}();

        {{else}}
        bool has{{nameUpperValue}} { get; set; } 
        {{/if}}
        {{/each}}
    }
}

{{/each}}
// Entities
{{#each contexts}}
namespace {{moduleNameValue}} {
    public sealed partial class {{nameUpperValue}}Entity: Entitas.Entity, Entitas.IEntity{{#if fakeEntityInterfacesValue}}, {{#each fakeEntityInterfacesValue}}{{global this}}{{#unless @last}}, {{/unless}}{{/each}}{{/if}} {
        public {{nameUpperValue}}Entity AddComponentByName(string name) {
            var componentIndex = {{nameUpperValue}}ComponentsLookup.GetComponentIndex(name);
            if (componentIndex == -1) throw new System.Exception("There is no component named " + name);
            return this.AddComponentByIndex(componentIndex);
        }

        public {{nameUpperValue}}Entity AddComponentByIndex(int index) {
            this.AddComponent(index, this.CreateComponent(index, {{nameUpperValue}}ComponentsLookup.componentTypes[index]));
            return this;
        }

        {{#each compsValue}}

        // {{classNameValue}}
        {{#if fieldValue}}
        public {{fieldValue}} {{nameValue}} { 
            get {
                var component = GetComponent({{../nameUpperValue}}ComponentsLookup.{{nameUpperValue}});
                if (component == null) throw new System.Exception("Component Does Not Exist. You are trying to get {{nameUpperValue}}, but it is not assigned. Try checking if entity has{{nameValue}}.");
                return (({{#if isFakeValue}}{{global moduleNameValue}}.Components.{{contextValue.nameUpperValue}}.{{classNameValue}}{{else}}Components.{{../nameUpperValue}}.{{classNameValue}}{{/if}})component).value;
            } 
            set {
                var component = CreateComponent<{{#if isFakeValue}}{{global moduleNameValue}}.Components.{{contextValue.nameUpperValue}}.{{classNameValue}}{{else}}Components.{{../nameUpperValue}}.{{classNameValue}}{{/if}}>({{../nameUpperValue}}ComponentsLookup.{{nameUpperValue}});
                component.value = value;
                ReplaceComponent({{../nameUpperValue}}ComponentsLookup.{{nameUpperValue}}, component);
            }
        }

        public bool has{{nameUpperValue}} { 
            get { return HasComponent({{../nameUpperValue}}ComponentsLookup.{{nameUpperValue}}); } 
            set { 
                if (value != has{{nameUpperValue}}) {
                    if (value) {
                        var component = CreateComponent<{{#if isFakeValue}}{{global moduleNameValue}}.Components.{{contextValue.nameUpperValue}}.{{classNameValue}}{{else}}Components.{{../nameUpperValue}}.{{classNameValue}}{{/if}}>({{../nameUpperValue}}ComponentsLookup.{{nameUpperValue}});
                        component.value = default({{fieldValue}});
                        AddComponent({{../nameUpperValue}}ComponentsLookup.{{nameUpperValue}}, component);
                    } else {
                        RemoveComponent({{../nameUpperValue}}ComponentsLookup.{{nameUpperValue}});
                    }
                }
            }
        } 

        public void Ping{{nameUpperValue}}() {
            var component = GetComponent({{../nameUpperValue}}ComponentsLookup.{{nameUpperValue}});
            if (component != null) ReplaceComponent({{../nameUpperValue}}ComponentsLookup.{{nameUpperValue}}, component);
        }

        {{else}}
        static readonly {{#if isFakeValue}}{{global moduleNameValue}}.Components.{{contextValue.nameUpperValue}}.{{classNameValue}}{{else}}Components.{{../nameUpperValue}}.{{classNameValue}}{{/if}} {{toLower classNameValue}} = new {{#if isFakeValue}}{{global moduleNameValue}}.Components.{{contextValue.nameUpperValue}}.{{classNameValue}}{{else}}Components.{{../nameUpperValue}}.{{classNameValue}}{{/if}}();
        public bool has{{nameUpperValue}} {
            get { return HasComponent({{../nameUpperValue}}ComponentsLookup.{{nameUpperValue}}); }
            set {
                if (value != has{{nameUpperValue}}) {
                    if (value) {
                        AddComponent({{../nameUpperValue}}ComponentsLookup.{{nameUpperValue}}, {{toLower classNameValue}});
                    } else {
                        RemoveComponent({{../nameUpperValue}}ComponentsLookup.{{nameUpperValue}});
                    }
                }
            }
        }
        {{/if}}
        {{/each}}
    }
}

{{/each}}


{{/each}}