// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Entitas;
using UnityEngine;
using System.Collections.Generic;

{{#each modules}}
namespace {{@key}}.Contracts {
{{#each multiReactiveContracts}}
    {{#unless isBlockedValue}}
    {{#if namespaceValue}}namespace {{namespaceValue}} { {{/if}}
        namespace Base {
            public abstract class {{nameUpperValue}}: MultiReactiveSystem<{{fakeContextValue.entityInterfaceValue}}, Contexts> {
                public {{nameUpperValue}}() : base(Contexts.sharedInstance) {
                }

                protected sealed override ICollector[] GetTrigger(Contexts contexts) {
                    return new ICollector[] {
                        {{#each contextsValue}}
                        {{#each ../triggersValue}}
                        {{global ../moduleNameValue}}.Contexts.sharedInstance.{{../nameValue}}.CreateCollector(Matcher<{{global ../moduleNameValue}}.{{../nameUpperValue}}Entity>{{#if match.allOf.length}}
                                .AllOf({{#each match.allOf}}{{global ../../moduleNameValue}}.{{../../nameUpperValue}}Matcher.{{nameUpperValue}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}{{#if match.anyOf.length}}
                                .AnyOf({{#each match.anyOf}}{{global ../../moduleNameValue}}.{{../../nameUpperValue}}Matcher.{{nameUpperValue}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}{{#if match.noneOf.length}}
                                .NoneOf({{#each match.noneOf}}{{global ../../moduleNameValue}}.{{../../nameUpperValue}}Matcher.{{nameUpperValue}}{{#unless @last}}, {{/unless}}{{/each}}){{/if}}.{{eventType}}()){{#unless @last}},{{/unless}}{{/each}}{{#unless @last}},{{/unless}}
                        {{/each}}
                    };
                }

                protected override bool Filter({{fakeContextValue.entityInterfaceValue}} entity) {
                    return true;
                }

                protected sealed override void Execute(List<{{fakeContextValue.entityInterfaceValue}}> entities) { Act(entities); }

                protected virtual void Act (List<{{fakeContextValue.entityInterfaceValue}}> entities) {
                    Debug.Log("Not implemented contract: {{moduleNameValue}}.{{nameUpperValue}}");
                }
            }
        }

        public partial class {{nameUpperValue}}: Base.{{nameUpperValue}} {
            public {{nameUpperValue}} () : base() { }
        }
    {{#if namespaceValue}} } {{/if}}
    {{/unless}}

{{/each}}

}

{{/each}}
