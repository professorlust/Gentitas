// <auto-generated>
//     This code was generated with love by Gentitas.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

using Entitas;
using System.Collections.Generic;

{{#each components}}
public partial class {{className}} : IComponent {
    {{#each fields}}
    public {{this}} {{@key}};
    {{/each}}
}

{{/each}}

{{#each contexts}}
public sealed partial class {{nameUpper}}Matcher {
    {{#each components}}
    static IMatcher<{{../nameUpper}}Entity> _matcher{{nameUpper}};

    public static IMatcher<{{../nameUpper}}Entity> {{nameUpper}} {
        get {
            if(_matcher{{nameUpper}} == null) {
                var matcher = (Matcher<{{../nameUpper}}Entity>)Matcher<{{../nameUpper}}Entity>.AllOf({{../nameUpper}}ComponentsLookup.{{nameUpper}});
                matcher.componentNames = CoreComponentsLookup.componentNames;
                _matcher{{nameUpper}} = matcher;
            }

            return _matcher{{nameUpper}};
        }
    }
    {{/each}}
}

public partial class {{nameUpper}}Context {
    {{#each components}}
    {{#if single}}
    
    // {{className}}
    public {{../nameUpper}}Entity {{name}}Entity { get { return GetGroup({{../nameUpper}}Matcher.{{nameUpper}}).GetSingleEntity(); } }

    {{#if fields}}
    public {{nameUpper}}Component {{name}} { get { return {{name}}Entity.{{name}}; } }
    public bool {{#if prefix}}{{prefix}}{{else}}has{{/if}}{{nameUpper}} { get { return {{name}}Entity != null; } }

    public {{../nameUpper}}Entity Set{{nameUpper}}({{#each fields}}{{this}} {{@key}}{{#unless @last}}, {{/unless}}{{/each}}) {
        if({{#if prefix}}{{prefix}}{{else}}has{{/if}}{{nameUpper}}) {
            throw new EntitasException("Could not set {{name}}!\n" + this + " already has an entity with {{nameUpper}}Component!",
                "You should check if the context already has a {{name}}Entity before setting it or use context.Replace{{nameUpper}}().");
        }
        var entity = CreateEntity();
        entity.Add{{nameUpper}}({{#each fields}}{{@key}}{{#unless @last}}, {{/unless}}{{/each}});
        return entity;
    }

    public Entity Replace{{nameUpper}}({{#each fields}}{{this}} {{@key}}{{#unless @last}}, {{/unless}}{{/each}}) {
        var entity = {{name}}Entity;
        if(entity == null) {
            entity = Set{{nameUpper}}({{#each fields}}{{@key}}{{#unless @last}}, {{/unless}}{{/each}});
        } else {
            entity.Replace{{nameUpper}}({{#each fields}}{{@key}}{{#unless @last}}, {{/unless}}{{/each}});
        }
        return entity;
    }

    public void Remove{{nameUpper}}() {
        DestroyEntity({{name}}Entity);
    }
    {{else}}
    public bool {{#if prefix}}{{prefix}}{{else}}has{{/if}}{{nameUpper}} {
        get { return {{name}}Entity != null; }
        set {
            var entity = {{name}}Entity;
            if(value != (entity != null)) {
                if(value) {
                    CreateEntity().{{#if prefix}}{{prefix}}{{else}}is{{/if}}{{nameUpper}} = true;
                } else {
                    DestroyEntity(entity);
                }
            }
        }
    }
    {{/if}}
    {{/if}}
    {{/each}}
}
{{/each}}

{{#each contexts}}
public partial class {{nameUpper}}Entity {
    {{#each components}}

    // {{className}}
    {{#if fields}}
    public {{nameUpper}}Component {{name}} { get { return ({{nameUpper}}Component)GetComponent({{../nameUpper}}ComponentsLookup.{{nameUpper}}); } }
    public bool {{#if prefix}}{{prefix}}{{else}}has{{/if}}{{nameUpper}} { get { return HasComponent({{../nameUpper}}ComponentsLookup.{{nameUpper}}); } }

    public {{../nameUpper}}Entity Add{{nameUpper}}({{#each fields}}{{this}} {{@key}}{{#unless @last}}, {{/unless}}{{/each}}) {
        var component = CreateComponent<{{nameUpper}}Component>({{../nameUpper}}ComponentsLookup.{{nameUpper}});
        {{#each fields}}
        component.{{@key}} = {{@key}};
        {{/each}}
        AddComponent({{../nameUpper}}ComponentsLookup.{{nameUpper}}, component);
        return this;
    }

    public {{../nameUpper}}Entity Replace{{nameUpper}}({{#each fields}}{{this}} {{@key}}{{#unless @last}}, {{/unless}}{{/each}}) {
        var component = CreateComponent<{{nameUpper}}Component>({{../nameUpper}}ComponentsLookup.{{nameUpper}});
        {{#each fields}}
        component.{{@key}} = {{@key}};
        {{/each}}
        ReplaceComponent({{../nameUpper}}ComponentsLookup.{{nameUpper}}, component);
        return this;
    }

    public {{../nameUpper}}Entity Remove{{nameUpper}}() {
        RemoveComponent({{../nameUpper}}ComponentsLookup.{{nameUpper}});
        return this;
    }
    {{else}}
    static readonly {{className}} {{toLower className}} = new {{className}}();
    public bool {{#if prefix}}{{prefix}}{{else}}is{{/if}}{{nameUpper}} {
        get { return HasComponent({{../nameUpper}}ComponentsLookup.{{nameUpper}}); }
        set {
            if(value != {{#if prefix}}{{prefix}}{{else}}is{{/if}}{{nameUpper}}) {
                if(value) {
                    AddComponent({{../nameUpper}}ComponentsLookup.{{nameUpper}}, {{toLower className}});
                } else {
                    RemoveComponent({{../nameUpper}}ComponentsLookup.{{nameUpper}});
                }
            }
        }
    }

    public {{../nameUpper}}Entity {{#if prefix}}{{toUpper prefix}}{{else}}Is{{/if}}{{nameUpper}} (bool value = true) {
        {{#if prefix}}{{prefix}}{{else}}is{{/if}}{{nameUpper}} = value;
        return this;
    }
    {{/if}}
    {{/each}}
}
{{/each}}